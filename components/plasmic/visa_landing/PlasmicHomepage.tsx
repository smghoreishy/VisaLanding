// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nmyTYNEmJ2A5WnCGcgGrL1
// Component: NjbCRfBeC7VE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: u-J0rH0B-4/codeComponent
import Select from "../../Select"; // plasmic-import: 6H_b-lY_Llg6/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import BuyServicestateCheck from "../../BuyServicestateCheck"; // plasmic-import: YpV6bnaLfsLh/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: QWcLsAq1KdCp/codeComponent

import { useScreenVariants as useScreenVariantsbV5KpnkZ7Fg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bV5kpnkZ7-FG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_visa_landing.module.css"; // plasmic-import: nmyTYNEmJ2A5WnCGcgGrL1/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: NjbCRfBeC7VE/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {
  italy: "italy";
};
export type PlasmicHomepage__VariantsArgs = {
  italy?: SingleBooleanChoiceArg<"italy">;
};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "italy"
);

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  desktop?: p.Flex<"section">;
  sectionOne?: p.Flex<"section">;
  columns?: p.Flex<"div">;
  button?: p.Flex<typeof AntdButton>;
  rightSide3?: p.Flex<"section">;
  loadingBoundary?: p.Flex<typeof LoadingBoundary>;
  select2?: p.Flex<typeof Select>;
  embedHtml?: p.Flex<typeof Embed>;
  leftSide2?: p.Flex<"div">;
  buyServicestateCheck?: p.Flex<typeof BuyServicestateCheck>;
};

export interface DefaultHomepageProps {}

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "buyServicestateCheck.mobileOnlyRemainAccountSend",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buyServicestateCheck.remainAccountSend",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "italy", "italy")
            ? "italy-tahsili"
            : "germany-tahsili"
      },
      {
        path: "buyServicestateCheck.apiUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "buyServicestateCheck.remainAccount",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "timer",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          '<div>    <script>                var timer = 0 + Math.floor(Math.random() * (60 - 1 + 1) + 1);                var el = document.getElementById(\'seconds-counter\');        function incrementSeconds() {            timer += 1;            var minutes = Math.floor(timer / 60) + 1;            var second = timer +60 - minutes*60;            el.innerText = " \u0622\u062e\u0631\u06cc\u0646 \u0632\u0645\u0627\u0646 \u0686\u06a9 \u0634\u062f\u0647:  " + minutes + " \u062f\u0642\u06cc\u0642\u0647 " + second + " \u062b\u0627\u0646\u06cc\u0647 \u0642\u0628\u0644 ";        }        var cancel = setInterval(incrementSeconds, 1000);                            </script>    <div id=\'seconds-counter\'>    </div></div>'
      },
      {
        path: "italy",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.italy
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    newNomiss: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "eEwzux4yUhU3yRQgmwJYLY",
            opId: "8b55c903-22eb-48ac-b8a6-2c829e7f7bc3",
            userArgs: {},
            cacheKey: "plasmic.$..$..$.8b55c903-22eb-48ac-b8a6-2c829e7f7bc3.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),
    openDate: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "eEwzux4yUhU3yRQgmwJYLY",
            opId: "3d345ee1-aafe-43ce-a084-561f4688def2",
            userArgs: {
              filters: [$state.select2.value]
            },
            cacheKey: "plasmic.$..$..$.3d345ee1-aafe-43ce-a084-561f4688def2.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),
    status: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "eEwzux4yUhU3yRQgmwJYLY",
            opId: "3bc6d580-7986-45e5-baeb-f76956e38287",
            userArgs: {
              filters: [$state.select2.value]
            },
            cacheKey: "plasmic.$..$..$.3bc6d580-7986-45e5-baeb-f76956e38287.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbV5KpnkZ7Fg()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
            { [sty.rootitaly]: hasVariant($state, "italy", "italy") }
          )}
        >
          <section
            data-plasmic-name={"desktop"}
            data-plasmic-override={overrides.desktop}
            className={classNames(projectcss.all, sty.desktop)}
          >
            <section
              data-plasmic-name={"sectionOne"}
              data-plasmic-override={overrides.sectionOne}
              className={classNames(projectcss.all, sty.sectionOne)}
            >
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column___8IwOw)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___33O5R)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__rt9Gg)}
                      displayHeight={"63px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/visa_landing/images/outputOnlinepngtoolspng2.png",
                        fullWidth: 488,
                        fullHeight: 124,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__obq6O
                      )}
                    >
                      {
                        "\u0646\u06af\u0631\u0627\u0646\u06cc \u0648\u0642\u062a \u0633\u0641\u0627\u0631\u062a \u0631\u0648 \u0627\u0632 \u062f\u0633\u062a \u0628\u062f\u06cc! \n\u062e\u06cc\u0627\u0644\u062a \u0631\u0627\u062d\u062a \u0645\u0627 \u0628\u0627\u0647\u0627\u062a \u062a\u0645\u0627\u0633 \u0645\u06cc\u06af\u06cc\u0631\u06cc\u0645."
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mrUkP
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "\u0646\u0631\u0645 \u0627\u0641\u0632\u0627\u0631 \u0647\u0648\u0634\u0645\u0646\u062f \u0645\u0627 \u0647\u0631 \u0644\u062d\u0638\u0647 \u062f\u0631 \u062d\u0627\u0644 \u0631\u0635\u062f \u06a9\u0631\u062f\u0646 \u0648\u0636\u0639\u06cc\u062a \u0633\u0641\u0627\u0631\u062a \u062e\u0627\u0646\u0647\u200c\u0647\u0627 \u0647\u0633\u062a \u0648 \u0628\u0647 \u0645\u062d\u0636 \u0628\u0627\u0632 \u0634\u062f\u0646\u060c "
                          }
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#1677FF", fontWeight: 700 }}
                        >
                          {
                            "\u0628\u0627 \u0634\u0645\u0627 \u062a\u0645\u0627\u0633 \u0645\u06cc\u06af\u06cc\u0631\u06cc\u0645"
                          }
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            " \u062a\u0627 \u0641\u0631\u0635\u062a \u0631\u0648 \u0627\u0632 \u062f\u0633\u062a \u0646\u062f\u06cc!"
                          }
                        </span>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pxjT)}
                    >
                      <AntdButton
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        href={"#sectionTwo"}
                        loading={false}
                        onClick={async () => {
                          const $steps = {};
                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {};
                                return (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jAsio
                          )}
                        >
                          {
                            "\u0628\u0647\u0645 \u062e\u0628\u0631 \u0628\u062f\u0647!"
                          }
                        </div>
                      </AntdButton>
                    </div>
                  </p.Stack>
                </div>
                <div className={classNames(projectcss.all, sty.column__aQpa3)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__g7I50, {
                      [sty.imgitaly__g7I50E06Fh]: hasVariant(
                        $state,
                        "italy",
                        "italy"
                      )
                    })}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "115%"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "100%"
                    }
                    loading={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "eager"
                        : "lazy"
                    }
                    src={{
                      src: "/plasmic/visa_landing/images/visaApprovedsvg.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 0.996672
                    }}
                  />
                </div>
              </div>
            </section>
            <div
              className={classNames(projectcss.all, sty.freeBox__mChJ4, {
                [sty.freeBoxitaly__mChJ4E06Fh]: hasVariant(
                  $state,
                  "italy",
                  "italy"
                )
              })}
            >
              <section
                data-plasmic-name={"rightSide3"}
                data-plasmic-override={overrides.rightSide3}
                className={classNames(projectcss.all, sty.rightSide3)}
              >
                <LoadingBoundary
                  data-plasmic-name={"loadingBoundary"}
                  data-plasmic-override={overrides.loadingBoundary}
                  className={classNames("__wab_instance", sty.loadingBoundary)}
                  loadingState={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__afSSc
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0G5GM
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cM9Xm
                          )}
                        >
                          {
                            "\u0648\u0636\u0639\u06cc\u062a \u0644\u062d\u0638\u0647 \u0627\u06cc \u0633\u0641\u0627\u0631\u062a \u062e\u0627\u0646\u0647"
                          }
                        </div>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__i8GiC
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__aehkI, {
                              [sty.imgitaly__aehkIe06Fh]: hasVariant(
                                $state,
                                "italy",
                                "italy"
                              )
                            })}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "27px"
                                : "40px"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"80px"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40px"
                                : "60px"
                            }
                            loading={"lazy"}
                            onClick={async event => {
                              const $steps = {};
                              $steps["updateItaly"] = true
                                ? (() => {
                                    const actionArgs = {
                                      vgroup: "italy",
                                      operation: 6,
                                      value: "italy"
                                    };
                                    return (({ vgroup, value }) => {
                                      if (typeof value === "string") {
                                        value = [value];
                                      }

                                      p.set($state, vgroup, false);
                                      return false;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                typeof $steps["updateItaly"] === "object" &&
                                typeof $steps["updateItaly"].then === "function"
                              ) {
                                $steps["updateItaly"] = await $steps[
                                  "updateItaly"
                                ];
                              }
                            }}
                            src={{
                              src: "/plasmic/visa_landing/images/germany1Png.png",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }}
                          />

                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___2AnJm, {
                              [sty.imgitaly___2AnJme06Fh]: hasVariant(
                                $state,
                                "italy",
                                "italy"
                              )
                            })}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "27px"
                                : "40px"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100px"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "40px"
                                : "60px"
                            }
                            loading={"lazy"}
                            onClick={async event => {
                              const $steps = {};
                              $steps["updateItaly"] = true
                                ? (() => {
                                    const actionArgs = {
                                      vgroup: "italy",
                                      operation: 4,
                                      value: "italy"
                                    };
                                    return (({ vgroup, value }) => {
                                      if (typeof value === "string") {
                                        value = [value];
                                      }

                                      p.set($state, vgroup, true);
                                      return true;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                typeof $steps["updateItaly"] === "object" &&
                                typeof $steps["updateItaly"].then === "function"
                              ) {
                                $steps["updateItaly"] = await $steps[
                                  "updateItaly"
                                ];
                              }
                            }}
                            src={{
                              src: "/plasmic/visa_landing/images/italypng.png",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }}
                          />
                        </p.Stack>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__o3SXq,
                            "select"
                          )}
                        >
                          <Select
                            data-plasmic-name={"select2"}
                            data-plasmic-override={overrides.select2}
                            className={classNames(
                              "__wab_instance",
                              sty.select2,
                              {
                                [sty.select2italy]: hasVariant(
                                  $state,
                                  "italy",
                                  "italy"
                                )
                              }
                            )}
                            onChange={(...eventArgs) => {
                              p.generateStateOnChangeProp($state, [
                                "select2",
                                "value"
                              ])(eventArgs[0]);
                            }}
                            options={
                              hasVariant($state, "italy", "italy")
                                ? (() => {
                                    const __composite = [
                                      { value: null, label: null },
                                      { value: null, label: null },
                                      { value: null, label: null }
                                    ];
                                    __composite["0"]["value"] = "italy-tahsili";
                                    __composite["0"]["label"] =
                                      "\u0648\u06cc\u0632\u0627\u06cc \u062a\u062d\u0635\u06cc\u0644\u06cc \u0627\u06cc\u062a\u0627\u0644\u06cc\u0627";
                                    __composite["1"]["value"] = "italy-melli";
                                    __composite["1"]["label"] =
                                      "\u0648\u06cc\u0632\u0627\u06cc \u0645\u0644\u06cc \u0627\u06cc\u062a\u0627\u0644\u06cc\u0627";
                                    __composite["2"]["value"] =
                                      "italy-schengen";
                                    __composite["2"]["label"] =
                                      "\u0648\u06cc\u0632\u0627\u06cc \u0634\u0646\u06af\u0646 \u0627\u06cc\u062a\u0627\u0644\u06cc\u0627";
                                    return __composite;
                                  })()
                                : (() => {
                                    const __composite = [
                                      { value: null, label: null },
                                      { value: null, label: null },
                                      { value: null, label: null }
                                    ];
                                    __composite["0"]["value"] =
                                      "germany-tahsili";
                                    __composite["0"]["label"] =
                                      "\u0648\u06cc\u0632\u0627\u06cc \u062a\u062d\u0635\u06cc\u0644\u06cc \u0622\u0644\u0645\u0627\u0646";
                                    __composite["1"]["value"] = "germany-legal";
                                    __composite["1"]["label"] =
                                      "\u0648\u06cc\u0632\u0627\u06cc \u0644\u06af\u0627\u0644 \u0622\u0644\u0645\u0627\u0646";
                                    __composite["2"]["value"] =
                                      "germany-schengen";
                                    __composite["2"]["label"] =
                                      "\u0648\u06cc\u0632\u0627\u06cc \u0634\u0646\u06af\u0646 \u0622\u0644\u0645\u0627\u0646";
                                    return __composite;
                                  })()
                            }
                            value={p.generateStateValueProp($state, [
                              "select2",
                              "value"
                            ])}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0N9FZ
                          )}
                        >
                          <Embed
                            data-plasmic-name={"embedHtml"}
                            data-plasmic-override={overrides.embedHtml}
                            className={classNames(
                              "__wab_instance",
                              sty.embedHtml
                            )}
                            code={
                              '<div>    <script>                var timer = Math.floor(Math.random() * (60 - 1 + 1) + 1);                var el = document.getElementById(\'seconds-counter\');        var minutes = Math.floor(timer / 60) + 1;            var second = timer +60 - minutes*60;            el.innerText = " \u0622\u062e\u0631\u06cc\u0646 \u0632\u0645\u0627\u0646 \u0686\u06a9 \u0634\u062f\u0647:  " + minutes + " \u062f\u0642\u06cc\u0642\u0647 " + second + " \u062b\u0627\u0646\u06cc\u0647 \u0642\u0628\u0644 ";                                        </script>    <div id=\'seconds-counter\'>    </div></div>'
                            }
                          />
                        </div>
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      $queries.status.data[0].status === "close"
                                    ) {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <section
                            className={classNames(
                              projectcss.all,
                              sty.section__d1O19
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___12Dq
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___43Ak
                                )}
                              >
                                {
                                  "\u0633\u0627\u06cc\u062a \u0647\u0645\u200c\u0627\u06a9\u0646\u0648\u0646 \u0628\u0633\u062a\u0647 \u0627\u0633\u062a!"
                                }
                              </div>
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(
                                  sty.img__zRiI,
                                  "redLight"
                                )}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "15px"
                                    : "20px"
                                }
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "15px"
                                    : "20px"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/visa_landing/images/circle1Png.png",
                                  fullWidth: 256,
                                  fullHeight: 256,
                                  aspectRatio: undefined
                                }}
                              />
                            </p.Stack>
                          </section>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      $queries.status.data[0].status === "open"
                                    ) {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <section
                            className={classNames(
                              projectcss.all,
                              sty.section__bTp49
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__axpux
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0C1T
                                )}
                              >
                                {
                                  "\u0633\u0627\u06cc\u062a \u0647\u0645\u200c\u0627\u06a9\u0646\u0648\u0646 \u0628\u0627\u0632 \u0627\u0633\u062a!"
                                }
                              </div>
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(
                                  sty.img__e9Hsf,
                                  "redLight"
                                )}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "15px"
                                    : "20px"
                                }
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "15px"
                                    : "20px"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/visa_landing/images/circlepngparspngcom8Png.png",
                                  fullWidth: 588,
                                  fullHeight: 595,
                                  aspectRatio: undefined
                                }}
                              />
                            </p.Stack>
                          </section>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hqsAj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ekxkb
                            )}
                          >
                            {
                              "\u0622\u062e\u0631\u06cc\u0646 \u0632\u0645\u0627\u0646\u200c\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0633\u0627\u06cc\u062a \u0628\u0627\u0632 \u0628\u0648\u062f\u0647 \u0627\u0633\u062a."
                            }
                          </div>
                          {(
                            (() => {
                              try {
                                return $queries.openDate.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })() ?? []
                          ).map((currentItem, currentIndex) => (
                            <section
                              className={classNames(
                                projectcss.all,
                                sty.section__kRwOy
                              )}
                              key={currentIndex}
                            >
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__js7M4
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8CrUp
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.date.slice(11, 19);
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u06f2\u06f4 \u062a\u06cc\u0631 \u06f1\u06f4\u06f0\u06f2: \u0633\u0627\u0639\u062a \u06f2\u06f2:\u06f0\u06f0";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__eho8C)}
                                  displayHeight={"23px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/visa_landing/images/clockpng.png",
                                    fullWidth: 64,
                                    fullHeight: 64,
                                    aspectRatio: undefined
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__paEt2
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.date.slice(0, 10);
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u06f2\u06f4 \u062a\u06cc\u0631 \u06f1\u06f4\u06f0\u06f2: \u0633\u0627\u0639\u062a \u06f2\u06f2:\u06f0\u06f0";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__lZnel)}
                                  displayHeight={"22px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/visa_landing/images/calendarpng.png",
                                    fullWidth: 64,
                                    fullHeight: 64,
                                    aspectRatio: undefined
                                  }}
                                />
                              </p.Stack>
                            </section>
                          ))}
                        </p.Stack>
                      </div>
                    )}
                  </ph.DataCtxReader>
                </LoadingBoundary>
              </section>
              <div
                data-plasmic-name={"leftSide2"}
                data-plasmic-override={overrides.leftSide2}
                className={classNames(projectcss.all, sty.leftSide2)}
              >
                <BuyServicestateCheck
                  data-plasmic-name={"buyServicestateCheck"}
                  data-plasmic-override={overrides.buyServicestateCheck}
                  apiUrl={p.generateStateValueProp($state, [
                    "buyServicestateCheck",
                    "apiUrl"
                  ])}
                  className={classNames(
                    "__wab_instance",
                    sty.buyServicestateCheck
                  )}
                  mobileOnlyRemainAccountSend={p.generateStateValueProp(
                    $state,
                    ["buyServicestateCheck", "mobileOnlyRemainAccountSend"]
                  )}
                  onApiUrlChange={p.generateStateOnChangeProp($state, [
                    "buyServicestateCheck",
                    "apiUrl"
                  ])}
                  onMobileOnlyRemainAccountSendChange={p.generateStateOnChangeProp(
                    $state,
                    ["buyServicestateCheck", "mobileOnlyRemainAccountSend"]
                  )}
                  onRemainAccountChange={p.generateStateOnChangeProp($state, [
                    "buyServicestateCheck",
                    "remainAccount"
                  ])}
                  onRemainAccountSendChange={p.generateStateOnChangeProp(
                    $state,
                    ["buyServicestateCheck", "remainAccountSend"]
                  )}
                  remainAccount={p.generateStateValueProp($state, [
                    "buyServicestateCheck",
                    "remainAccount"
                  ])}
                  remainAccountSend={p.generateStateValueProp($state, [
                    "buyServicestateCheck",
                    "remainAccountSend"
                  ])}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__yzlQk)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/visa_landing/images/_12083737WavyBus38Single091Svg.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1.002667
                  }}
                />
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "desktop",
    "sectionOne",
    "columns",
    "button",
    "rightSide3",
    "loadingBoundary",
    "select2",
    "embedHtml",
    "leftSide2",
    "buyServicestateCheck"
  ],
  desktop: [
    "desktop",
    "sectionOne",
    "columns",
    "button",
    "rightSide3",
    "loadingBoundary",
    "select2",
    "embedHtml",
    "leftSide2",
    "buyServicestateCheck"
  ],
  sectionOne: ["sectionOne", "columns", "button"],
  columns: ["columns", "button"],
  button: ["button"],
  rightSide3: ["rightSide3", "loadingBoundary", "select2", "embedHtml"],
  loadingBoundary: ["loadingBoundary", "select2", "embedHtml"],
  select2: ["select2"],
  embedHtml: ["embedHtml"],
  leftSide2: ["leftSide2", "buyServicestateCheck"],
  buyServicestateCheck: ["buyServicestateCheck"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  desktop: "section";
  sectionOne: "section";
  columns: "div";
  button: typeof AntdButton;
  rightSide3: "section";
  loadingBoundary: typeof LoadingBoundary;
  select2: typeof Select;
  embedHtml: typeof Embed;
  leftSide2: "div";
  buyServicestateCheck: typeof BuyServicestateCheck;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    desktop: makeNodeComponent("desktop"),
    sectionOne: makeNodeComponent("sectionOne"),
    columns: makeNodeComponent("columns"),
    button: makeNodeComponent("button"),
    rightSide3: makeNodeComponent("rightSide3"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    select2: makeNodeComponent("select2"),
    embedHtml: makeNodeComponent("embedHtml"),
    leftSide2: makeNodeComponent("leftSide2"),
    buyServicestateCheck: makeNodeComponent("buyServicestateCheck"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
